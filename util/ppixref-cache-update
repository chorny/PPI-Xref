#!/usr/bin/perl -w

# Script for updating a ppixref cache directory based
# on one or more git repositories.

# TODO: allow indexing a directory (either git or plain) from scratch

use strict;
use warnings;

use File::Basename qw[basename];
our $ME = basename($0);

use Getopt::Long;

my %Opt = (
    update  => 0,
    rebuild => 0,
    time_padding => 1.05,
    pull => 1,
    );

# We pad the --since seconds because of processing overhead.
# However, there's no point in padding too much, so let's have max.
our $MAX_PAD_SEC = 6 * 3600;  # 6h

sub usage {
    die <<__EOU__
$ME: Usage:
$ME [--since=[sha1|'n h'|'n min'|'n s']|--time_padding=1.05|--pull] git:dir ...
$ME --cache_directory=dir [--update] git:dir ...
$ME --verbose ...
$ME --help

The directories must either be git repository roots:

 git:/dir/...

or a plain directory

  /dir/...

If the directory is a git directory, 'git pull' is executed in it
before looking for changes, use --nopull not to.

Examples:
$ME --since=cafe0123
$ME --since='24 h'
$ME --since='3 min' --time_padding=1.0  # exactly 3 minutes

The default is --since=$Opt{since}, but with the time padding that ends up being more.
The --since=time are first converted to seconds, and then multiplied by $Opt{time_padding}.

At most the time padding increases the since value by $MAX_PAD_SEC seconds.
The padding is done to paper over processing overlap, so that one can
e.g. daily reprocess and not miss things.  This is obviously an ugly
hack: for git repositories a better way is to use the exact checksums.

By default only the files requiring attention are listed, with "R" for
refreshes (modified or addded), and "D" for deletes.  To really update
the ppixref cache you need

--cache_directory=dir --update

which will reprocess the modified files, process the added files, and
remove the cache files of deleted files.

__EOU__
}

sub parse_since {
    my $s = shift;
    if ($s =~ m{^(\d+(?:\.\d+)?)\s*(h(?:(?:our)?rs)?|m(?:in(?:(?:ute)?s)?)?|s(?:ec(?:(?:ond)?s)?)?)$}) {
        my $t = $1;
        my $u = $2;
        my $s = $u =~ /^h/ ? 3600 * $t : $u =~ /^m/ ? 60 * $s : $s;
        my $pad_sec = int($s * ($Opt{time_padding} - 1.0));
        $pad_sec = $MAX_PAD_SEC if $pad_sec > $MAX_PAD_SEC;
        $s += $pad_sec;
        return "--since='$s seconds ago'";
    } elsif ($s =~ m|^[0-9a-f]{6,}|) {
        return "$s..HEAD";
    } else {
         die "$ME: Unexpected --since='$s'\n";
    }
}

usage()
    unless GetOptions(
        'since=s'           => \$Opt{since},
        'time_padding=f'    => \$Opt{time_padding},
        'pull'              => \$Opt{pull},
        'cache_directory=s' => \$Opt{cache_directory},
        'update'            => \$Opt{update},
        'rebuild'            => \$Opt{rebuild},
        'verbose'           => \$Opt{verbose},
        'help'              => \$Opt{help},
    );
usage() if $Opt{help};

unless ($Opt{update} ^ $Opt{rebuild}) {
    die "$ME: Need exactly one of --update and --rebuild\n";
}

if (defined $Opt{rebuild} && defined $Opt{since}) {
    die "$ME: Specifying --since with --rebuild makes no sense\n";
}

$Opt{since} //= '24 h';

if ($Opt{time_padding} < 1.0 || $Opt{time_padding} > 2.0) {
    die "$ME: Unexpected --time_padding=$Opt{time_padding}\n";
}

my $since = parse_since($Opt{since});

print "$ME: since: $since\n";

use File::Find qw[find];

my %Cache;

my $xref;

my $cache_directory = $Opt{cache_directory};
if (defined $cache_directory) {
    unless ($Opt{update} || $Opt{rebuild}) {
        die "$ME: --cache_directory defined but neither --update nor --rebuild used\n";
    }
    use PPI::Xref;
    $xref = PPI::Xref->new({cache_directory => $cache_directory,
                            # cache_verbose => 1,
                            process_verbose => $Opt{verbose},
                           });
    find(
        sub {
            if (/\.p[ml]\.cache$/) {
                my $name = $xref->__unparse_cache_filename($File::Find::name);
                $Cache{$name}++;
            }
        },
        $cache_directory);
    printf("$ME: found %d cache files in '$cache_directory'\n",
           scalar keys %Cache);
} else {
    die "$ME: --cache_directory undefined but either --update or --delete used\n";
}

for my $arg (@ARGV) {
    my $dir;
    my $git;
    if ($arg =~ m{^git:(/.+)}) {
        $dir = $1;
        $git = 1;
    } elsif ($arg =~ m{^/.+}) {
        $dir = $arg;
    } else {
        warn "$ME: Skipping unexpected argument '$arg'\n";
        next;
    }

    unless (chdir($dir)) {
        warn "$ME: chdir('$dir') failed: $!\n";
        next;
    }

    my %update;

    sub find_pm_no_git {
    }

    if ($Opt{update}) {
        if ($git) {
            unless (-d ".git") {
                warn "$ME: Skipping '$dir' since found no .git\n";
                next;
            }
            my $pull = qq[git pull];
            print "$ME: '$pull' in '$dir'\n";
            unless (system($pull) == 0) {
                warn "$ME: '$pull' failed in '$dir': $!\n";
                next;
            }
            my $log = qq[git log --reverse --name-status --oneline $since];
            print "$ME: '$log' in '$dir'\n";
            my $log_fh;
            unless (open($log_fh,  "$log |")) {
                warn "$ME: open(..., '$log |') failed in '$dir': $!\n";
                next;
            }
            while (<$log_fh>) {
                if (/^([MAD])\s+(.+\.pm)$/) {
                    $update{"$dir/$2"} = $1;
                }
            }
        } else {
            if (-d ".git") {
                warn "$ME: Skipping '$dir' since found .git\n";
                next;
            }
            find(
                sub {
                    my $name = $File::Find::name;
                    if (exists $Cache{$name}) {
                        $update{$name} = 'M';
                    }
                }, $dir);
        }
    } elsif ($Opt{rebuild}) {
        find(
            sub {
                if (/\.pm$/) {
                    my $name = $File::Find::name;
                    $update{$name} = 'A';
                }
            }, $dir);
    }

    for my $c (keys %Cache) {
        my $cache_filename = $xref->__cache_filename($c);
        unless (-f $cache_filename) {
            $update{$c} = 'D';
        }
    }

    my @M;
    my @A;
    my @D;
    for my $f (sort keys %update) {
        my $v = $update{$f};
        if ($v eq 'M') {
            push @M, $f;
        } elsif ($v eq 'A') {
            push @A, $f;
        } elsif ($v eq 'D') {
            push @D, $f;
        } else {
            die qq[$ME: Unexpected value '$v' for key '$f'\n"];
        }
    }

    my $config = {
        D => [ \@D, 'deleting',     'deleted',
               sub { $xref->cache_delete(@_) } ],
        A => [ \@A, 'processing',   'added',
               sub { $xref->process(@_)      } ],
        M => [ \@M, 'reprocessing', 'changed',
               sub { $xref->process(@_)      } ],
    };

    for my $o (qw[D A M]) {
        my $c = $config->{$o};
        my @f = @{ $c->[0] };
        if (scalar @f) {
            if ($Opt{verbose}) {
                for my $f (@f) {
                    print "$o\t$f\n";
                }
                printf("$ME: Possibly $c->[1] %d files in '$arg'\n",
                       scalar @f);
            }
            if (defined $xref) {
                $c->[3]->(@f);
            }
        } else {
            print "$ME: No files $c->[2] in '$arg'.\n";
        }
    }
}

if (defined $xref) {
    printf("$ME: cache reads=%s writes=%s creates=%d updates=%d deletes=%s\n",
           $xref->cache_reads   || 0,
           $xref->cache_writes  || 0,
           $xref->cache_creates || 0,
           $xref->cache_updates || 0,
           $xref->cache_deletes || 0);
}

exit(0);
